name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ============================================
  # BACKEND CI
  # ============================================
  backend-test:
    name: Backend - Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: 📥 Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: 🧪 Run unit tests
        working-directory: ./backend
        run: npm run test:unit
        env:
          NODE_ENV: test
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      
      - name: 🔗 Run integration tests
        working-directory: ./backend
        run: npm run test:integration
        env:
          NODE_ENV: test
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      
      - name: 📊 Coverage
        working-directory: ./backend
        run: npm run test:coverage
        env:
          NODE_ENV: test
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

  backend-docker:
    name: Backend - Docker Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
      
      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/backend.Dockerfile
          push: false
          tags: dubsar-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # BACKEND CD (solo en main, después de tests)
  # ============================================
  backend-deploy:
    name: Backend - Deploy to Render
    needs: [backend-test, backend-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 🚀 Trigger Render Deploy
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
          echo "✅ Backend deployment triggered!"

  # ============================================
  # FRONTEND CI
  # ============================================
  frontend-lint:
    name: Frontend - Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📥 Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: 🔍 Run ESLint
        working-directory: ./frontend
        run: npm run lint

  frontend-build:
    name: Frontend - Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📥 Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: 🏗️ Build Next.js
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000

  frontend-docker:
    name: Frontend - Docker Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
      
      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/frontend.Dockerfile
          push: false
          tags: dubsar-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # FRONTEND CD (solo en main, después de tests)
  # ============================================
  frontend-deploy:
    name: Frontend - Deploy to Vercel
    needs: [frontend-lint, frontend-build, frontend-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./frontend
      
      - name: ✅ Deployment Complete
        run: echo "🎉 Frontend deployed to Vercel!"