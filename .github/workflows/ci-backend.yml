name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci-backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [22.x]
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
      
      - name: üîß Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: üì• Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: üß™ Run unit tests
        working-directory: ./backend
        run: npm run test:unit
        env:
          NODE_ENV: test
          # ‚≠ê Variables necesarias para que los tests funcionen
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      
      - name: üîó Run integration tests
        working-directory: ./backend
        run: npm run test:integration
        env:
          NODE_ENV: test
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      
      - name: üìä Generate coverage report
        working-directory: ./backend
        run: npm run test:coverage
        env:
          NODE_ENV: test
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      
      - name: üì§ Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage
        if: always()

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4
      
      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: üèóÔ∏è Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/backend.Dockerfile
          push: false
          tags: dubsar-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max