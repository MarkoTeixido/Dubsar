name: Frontend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/ci-frontend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
  workflow_dispatch:

jobs:
  test:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [22.x]
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📥 Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: 🧪 Run unit tests
        working-directory: ./frontend
        run: npm run test:unit
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
      
      - name: 🔗 Run integration tests
        working-directory: ./frontend
        run: npm run test:integration
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
      
      - name: 📊 Generate coverage report
        working-directory: ./frontend
        run: npm run test:coverage
      
      - name: 📤 Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage

  lint:
    name: Lint Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📥 Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: 🔍 Run ESLint
        working-directory: ./frontend
        run: npm run lint

  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📥 Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: 🏗️ Build Next.js
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
      
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🏗️ Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/frontend.Dockerfile
          push: false
          tags: dubsar-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # E2E tests con Playwright (opcional)
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📥 Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: 🎭 Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
      
      - name: 🧪 Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
      
      - name: 📤 Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report/